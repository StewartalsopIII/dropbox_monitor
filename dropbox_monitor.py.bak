#!/usr/bin/env python3

import time
import os
import shutil
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from datetime import datetime
from google.cloud import speech
from tqdm import tqdm

from common.config import Config, init_environment
from common.utils import setup_logging, convert_to_wav, ensure_dir_exists
from transcript_formatter import TranscriptFormatter
from speaker_diarizer import SpeakerDiarizer

# Initialize environment and logging
init_environment()
setup_logging('transcript_processor.log')

# Initialize Google Cloud Speech-to-Text client
speech_client = speech.SpeechClient()

class TranscriptionHandler(FileSystemEventHandler):
    def __init__(self):
        self.processing_files = set()
        self.transcript_formatter = TranscriptFormatter()
        self.speaker_diarizer = SpeakerDiarizer()
        self.speaker_diarizer = SpeakerDiarizer()
        
    def on_created(self, event):
        if event.is_directory:
            return
        self._handle_event(event)

    def on_modified(self, event):
        if event.is_directory:
            return
        self._handle_event(event)

    def _handle_event(self, event):
        try:
            file_path = event.src_path
            
            # Skip temporary files
            if file_path.endswith('.tmp'):
                return
                
            # Only process audio files in the "Audio Record" folder
            if not ('Audio Record' in file_path and file_path.endswith('.m4a')):
                return
                
            # Skip if we're already processing this file
            if file_path in self.processing_files:
                return
                
            # Add to processing set
            self.processing_files.add(file_path)
            
            try:
                # Wait a moment to ensure file is fully written
                time.sleep(1)
                self.process_audio_file(file_path)
            finally:
                # Always remove from processing set
                self.processing_files.remove(file_path)
                
        except Exception as e:
            logging.error(f"Error handling event for {event.src_path}: {str(e)}")


    def transcribe_audio(self, wav_path):
        """Transcribe audio using Google Cloud Speech-to-Text."""
        try:
            # Get file size
            file_size = os.path.getsize(wav_path)
            logging.info(f"Processing audio file ({file_size / 1024 / 1024:.2f} MB)...")
            
            # Read the audio file
            with open(wav_path, 'rb') as audio_file:
                content = audio_file.read()
            
            audio = speech.RecognitionAudio(content=content)
            config = speech.RecognitionConfig(
                encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
                sample_rate_hertz=44100,
                language_code="en-US",
                enable_speaker_diarization=True,
                diarization_speaker_count=2  # Assumes 2 speakers for meeting
            )
            
            # Perform the transcription
            response = speech_client.recognize(config=config, audio=audio)
            
            # Process speaker diarization
            transcript = []
            for result in response.results:
                alternative = result.alternatives[0]
                
                # Extract speaker tags
                for word in alternative.words:
                    speaker_tag = word.speaker_tag
                    speaker = f"Speaker {speaker_tag}"
                    content = word.word
                    
                    # Start new line for new speaker
                    if not transcript or transcript[-1].startswith(f"{speaker}:"):
                        transcript.append(f"{speaker}: {content}")
                    else:
                        transcript[-1] += f" {content}"
            
            return "\n".join(transcript)
            
        except Exception as e:
            logging.error(f"Transcription error: {str(e)}")
            raise

    def process_audio_file(self, file_path):
        """Process a new audio file for transcription and analysis."""
        try:
            # Check if file still exists
            if not os.path.exists(file_path):
                return
                
            filename = os.path.basename(file_path)
            meeting_folder = os.path.dirname(os.path.dirname(file_path))
            file_size = os.path.getsize(file_path)
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            # Create transcript folder
            transcript_folder = os.path.join(meeting_folder, Config.TRANSCRIPT_FOLDER)
            ensure_dir_exists(transcript_folder)
            
            # Define file paths
            audio_copy_path = os.path.join(transcript_folder, filename)
            wav_path = os.path.join(transcript_folder, f"{os.path.splitext(filename)[0]}.wav")
            transcript_path = os.path.join(transcript_folder, f"{os.path.splitext(filename)[0]}.md")
            analysis_path = os.path.join(transcript_folder, f"{os.path.splitext(filename)[0]}_analysis.md")
            
            # Copy original audio file
            if not os.path.exists(audio_copy_path):
                shutil.copy2(file_path, audio_copy_path)
            
            # Convert to WAV
            convert_to_wav(file_path, wav_path)
            
            # Get transcription
            transcription = self.transcribe_audio(wav_path)
            
            # Process speaker diarization
            segments, speaker_mapping = self.speaker_diarizer.process_transcript(transcription)
            speaker_metadata = self.speaker_diarizer.format_metadata(speaker_mapping)
            
            # Format and save transcription
            metadata = {
                "Meeting": os.path.basename(meeting_folder),
                "File": filename,
                "Size": f"{file_size / 1024 / 1024:.2f} MB",
                "Processed": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                "speaker_mapping": speaker_mapping,
                **speaker_metadata
            }
            formatted_transcript = self.transcript_formatter.format_transcript(
                transcription, metadata)
            
            with open(transcript_path, 'w') as f:
                f.write(formatted_transcript)
                
            # Generate and save title analysis
            analysis_text = self.title_analyzer.analyze_transcript(transcription)
            self.title_analyzer.save_analysis(analysis_text, analysis_path)
            
            # Clean up WAV file
            if os.path.exists(wav_path):
                os.remove(wav_path)
            
            logging.info(f"\n{'='*50}")
            logging.info(f"Audio file processed!")
            logging.info(f"Meeting: {os.path.basename(meeting_folder)}")
            logging.info(f"File: {filename}")
            logging.info(f"Size: {file_size / 1024 / 1024:.2f} MB")
            logging.info(f"Time: {timestamp}")
            logging.info(f"Transcript saved to: {transcript_path}")
            logging.info(f"Analysis saved to: {analysis_path}")
            logging.info(f"{'='*50}\n")
                
        except Exception as e:
            logging.error(f"Error processing file {file_path}: {str(e)}")

def monitor_folder(path):
    """Monitor a folder for new audio files."""
    if not os.path.exists(path):
        raise ValueError(f"The path {path} does not exist!")

    logging.info(f"Starting monitoring of: {path}")
    logging.info("Waiting for new recordings...")
    
    event_handler = TranscriptionHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("\nStopping monitoring...")
        observer.stop()
        observer.join()
        logging.info("Monitoring stopped")

if __name__ == "__main__":
    # Your Dropbox folder path
    DROPBOX_PATH = "/Users/stewartalsop/Dropbox/Crazy Wisdom/Beautifully Broken/Zoom Folder"
    
    try:
        monitor_folder(DROPBOX_PATH)
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")